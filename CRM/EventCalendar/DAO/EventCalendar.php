<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.osseed.eventcalendar/xml/schema/CRM/EventCalendar/EventCalendar.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:bda8dba808e126e70c579d4db8850af8)
 */
use CRM_EventCalendar_ExtensionUtil as E;

/**
 * Database access object for the EventCalendar entity.
 */
class CRM_EventCalendar_DAO_EventCalendar extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '4.4';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_event_calendar';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique EventCalendar ID
   *
   * @var int
   */
  public $id;

  /**
   * Calendar Title
   *
   * @var varchar(255)
   */
  public $calendar_title;

  /**
   * Null or resource name
   *
   * @var varchar(64)
   */
  public $calendar_type;

  /**
   * Show Past Events
   *
   * @var bool
   */
  public $show_past_events;

  /**
   * Show End Date
   *
   * @var bool
   */
  public $show_end_date;

  /**
   * Show Only Public or All
   *
   * @var bool
   */
  public $show_public_events;

  /**
   * Use the Month param in the calendar
   *
   * @var bool
   */
  public $events_by_month;

  /**
   * Show the event timing
   *
   * @var bool
   */
  public $event_timings;

  /**
   * How many months to show events
   *
   * @var int
   */
  public $events_from_month;

  /**
   * Whether to show event type filters
   *
   * @var bool
   */
  public $event_type_filters;

  /**
   * Show week begins on
   *
   * @var bool
   */
  public $week_begins_from_day;

  /**
   * Use 24 hour format
   *
   * @var bool
   */
  public $time_format_24_hour;

  /**
   * Show recurring events
   *
   * @var bool
   */
  public $recurring_event;

  /**
   * Show enrollment status
   *
   * @var bool
   */
  public $enrollment_status;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_event_calendar';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Event Calendars') : E::ts('Event Calendar');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique EventCalendar ID'),
          'required' => TRUE,
          'where' => 'civicrm_event_calendar.id',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => '4.4',
        ],
        'calendar_title' => [
          'name' => 'calendar_title',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Calendar Title'),
          'description' => E::ts('Calendar Title'),
          'where' => 'civicrm_event_calendar.calendar_title',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'calendar_type' => [
          'name' => 'calendar_type',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Calendar Type'),
          'description' => E::ts('Null or resource name'),
          'where' => 'civicrm_event_calendar.calendar_type',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'show_past_events' => [
          'name' => 'show_past_events',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Show Past Events'),
          'description' => E::ts('Show Past Events'),
          'where' => 'civicrm_event_calendar.show_past_events',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'show_end_date' => [
          'name' => 'show_end_date',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Show End Date'),
          'description' => E::ts('Show End Date'),
          'where' => 'civicrm_event_calendar.show_end_date',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'show_public_events' => [
          'name' => 'show_public_events',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Show Public Events'),
          'description' => E::ts('Show Only Public or All'),
          'where' => 'civicrm_event_calendar.show_public_events',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'events_by_month' => [
          'name' => 'events_by_month',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Events By Month'),
          'description' => E::ts('Use the Month param in the calendar'),
          'where' => 'civicrm_event_calendar.events_by_month',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'event_timings' => [
          'name' => 'event_timings',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Event Timings'),
          'description' => E::ts('Show the event timing'),
          'where' => 'civicrm_event_calendar.event_timings',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'events_from_month' => [
          'name' => 'events_from_month',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Events From Month'),
          'description' => E::ts('How many months to show events'),
          'where' => 'civicrm_event_calendar.events_from_month',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'event_type_filters' => [
          'name' => 'event_type_filters',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Event Type Filters'),
          'description' => E::ts('Whether to show event type filters'),
          'where' => 'civicrm_event_calendar.event_type_filters',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'week_begins_from_day' => [
          'name' => 'week_begins_from_day',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Week Begins From Day'),
          'description' => E::ts('Show week begins on'),
          'where' => 'civicrm_event_calendar.week_begins_from_day',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'time_format_24_hour' => [
          'name' => 'time_format_24_hour',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Time Format 24 Hour'),
          'description' => E::ts('Use 24 hour format'),
          'where' => 'civicrm_event_calendar.time_format_24_hour',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'recurring_event' => [
          'name' => 'recurring_event',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Recurring Event'),
          'description' => E::ts('Show recurring events'),
          'where' => 'civicrm_event_calendar.recurring_event',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
        'enrollment_status' => [
          'name' => 'enrollment_status',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Enrollment Status'),
          'description' => E::ts('Show enrollment status'),
          'where' => 'civicrm_event_calendar.enrollment_status',
          'table_name' => 'civicrm_event_calendar',
          'entity' => 'EventCalendar',
          'bao' => 'CRM_EventCalendar_DAO_EventCalendar',
          'localizable' => 0,
          'add' => '4.4',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'event_calendar', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'event_calendar', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
